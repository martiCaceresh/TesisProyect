@model OptiArroz_Tesis_Proyect.Models.ViewModels.RiceLotMovementVM

<style>

    .ubication-box {
        transition: all 0.3s ease;
        position: relative;
    }

        .ubication-box.clickable:hover {
            opacity: 0.8;
            transform: scale(1.05);
        }

    /* Hacer el contenedor scrolleable horizontalmente si es necesario */
    #UbicationsGraphics .position-relative {
        max-width: 100%;
        overflow-x: auto;
    }

    /* Tooltip personalizado en hover */
    .ubication-box[title]:hover::after {
        content: attr(title);
        position: absolute;
        bottom: 100%;
        left: 50%;
        transform: translateX(-50%);
        background: rgba(0, 0, 0, 0.8);
        color: white;
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 12px;
        white-space: nowrap;
        z-index: 1000;
    }

    .form-control {
        text-transform: uppercase;
    }

    .modal-dialog-custom-lg {
        max-width: 90%;
    }

    .page-loader {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 9999;
        visibility: hidden;
    }

    .circle {
        width: 20px;
        height: 20px;
        border-radius: 50%;
        margin-right: 10px;
    }

    #kt_app_header_wrapper{
        display:none;
    }

    #footer {
        background-color: #f8f9fa;
        position: fixed;
        left: 0;
        bottom: 0;
        width: 100%;
        text-align: center;
    }

        #footer a {
            color: #495057;
            text-decoration: none;
        }

            #footer a:hover {
                color: #007bff;
            }

        #footer .fa {
            margin: 0 10px;
        }
</style>
<!--end::Style-->
<script>
    function ShowZoneUbications(element) {
        console.log('Iniciando ShowZoneUbications');

        const selectedOption = element.find('option:selected');
        const idZone = selectedOption.val();
        const rows = parseInt(selectedOption.data('rows') || 0);
        const columns = parseInt(selectedOption.data('columns') || 0);
        const container = $('#UbicationsGraphics');

        console.log('Valores obtenidos:', {
            idZone: idZone,
            rows: rows,
            columns: columns
        });

        // Limpiar el contenedor
        container.empty();
        $('#IdUbication').val('');
        $('#UbicationSelected').val('');

        // Si no hay una opción seleccionada o la zona tiene 0 filas o columnas, ocultar el label y salir
        if (!idZone || rows === 0 || columns === 0) {
            console.log('Saliendo: No hay zona seleccionada o filas/columnas son 0');
            document.getElementById('SeeUbicationSection').style.display = 'none';
            document.getElementById('UbicationSelectedLabel').style.display = 'none';
            document.getElementById('UbicationSelectedInput').style.display = 'none';
            $('#UbicationSelected').removeAttr('required').removeAttr('data-validation');
            return;
        }
        else {
            $('#UbicationSelected').attr('required', 'required').attr('data-validation', 'required');
            document.getElementById('UbicationSelectedLabel').style.display = 'none';
            document.getElementById('UbicationSelectedInput').style.display = 'none';
        }

        // Mostrar el label
        document.getElementById('SeeUbicationSection').style.display = 'block';




        console.log('Iniciando llamada AJAX para zona:', idZone);
        // Obtener ubicaciones mediante AJAX
        $.ajax({
            url: '/Ubication/GetUbicationsByZone',
            type: 'GET',
            data: { IdZone: idZone },
            success: function (ubicationsData) {
                console.log('Ubicaciones recibidas:', ubicationsData);

                // Crear matriz para organizar las ubicaciones
                let ubicationMatrix = {};
                ubicationsData.forEach(ubication => {
                    if (!ubicationMatrix[ubication.row]) {
                        ubicationMatrix[ubication.row] = {};
                    }
                    ubicationMatrix[ubication.row][ubication.column] = ubication;
                });

                console.log('Matriz de ubicaciones creada:', ubicationMatrix);

                // Crear la cuadrícula
                let html = '<div class="position-relative overflow-auto px-2">';
                html += '<div class="d-flex flex-column gap-2">'; // Contenedor principal

                // Crear filas y columnas usando los valores de data-rows y data-columns
                for (let row = 1; row <= rows; row++) {
                    html += '<div class="d-flex gap-2">'; // Fila

                    for (let col = 1; col <= columns; col++) {
                        const ubication = ubicationMatrix[row]?.[col];

                        if (ubication) {
                            console.log(`Procesando ubicación F${row}C${col}:`, ubication);
                            const isOccupied = ubication.idCurrentRiceLot !== null;
                            const backgroundColor = isOccupied ? '#50CD89' : '#F1416C';
                            const isClickable = !isOccupied;

                            html += `<div class="ubication-box ${isClickable ? 'clickable' : ''}"
                                                data-id="${ubication.idUbication}"
                                                data-name="F${row}C${col}"
                                                title="F${row}C${col}"
                                                style="background-color: ${backgroundColor};
                                                       min-width: 45px;
                                                       height: 45px;
                                                       display: flex;
                                                       align-items: center;
                                                       justify-content: center;
                                                       border-radius: 4px;
                                                       cursor: ${isClickable ? 'pointer' : 'not-allowed'};
                                                       color: white;
                                                       font-size: 12px;
                                                       text-align: center;">
                                               F${row}C${col}
                                           </div>`;
                        } else {
                            console.log(`Ubicación vacía en F${row}C${col}`);
                            html += `<div style="min-width: 45px;
                                                      height: 45px;
                                                      border: 1px dashed #ccc;
                                                      border-radius: 4px;"></div>`;
                        }
                    }

                    html += '</div>'; // Fin de la fila

                    // Agregar espacio para pasillo después de cada 2 filas
                    if (row % 2 === 0 && row < rows) {
                        console.log(`Agregando pasillo después de la fila ${row}`);
                        html += `<div class="d-flex gap-2" style="height: 30px; margin: 10px 0;">
                                           <div style="min-width: 100%;
                                                     background-color: #f5f5f5;
                                                     border: 1px dashed #ccc;
                                                     border-radius: 4px;
                                                     display: flex;
                                                     align-items: center;
                                                     justify-content: center;
                                                     color: #999;
                                                     font-size: 12px;">
                                               Pasillo ${row / 2}
                                           </div>
                                       </div>`;
                    }
                }

                html += '</div></div>';
                container.append(html);
                console.log('Cuadrícula generada y agregada al contenedor');

                // Añadir event listeners para las ubicaciones clickeables
                $('.ubication-box.clickable').click(function () {
                    const idUbication = $(this).data('id');
                    const UbicationName = $(this).data('name');
                    console.log('Ubicación seleccionada:', idUbication);

                    // Restaurar color rojo a la ubicación previamente seleccionada
                    $('.ubication-box.selected').css('background-color', '#F1416C').removeClass('selected');

                    // Marcar la nueva ubicación seleccionada en azul
                    $(this).css('background-color', '#009EF7').addClass('selected');

                    // Actualizar el input hidden
                    $('#IdUbication').val(idUbication);
                    $('#UbicationSelected').val(UbicationName);

                    ValidateElement($('#UbicationSelected'));

                    //Mostrar la seccion de ver ubicacion seleccionada
                    document.getElementById('UbicationSelectedLabel').style.display = 'block';
                    document.getElementById('UbicationSelectedInput').style.display = 'block';

                    //Cerrar el modal
                    const modal = document.getElementById('kt_modal_1');
                    const modalInstance = bootstrap.Modal.getInstance(modal) || new bootstrap.Modal(modal);
                    modalInstance.hide()

                    console.log('Input hidden actualizado con:', idUbication);
                });
            },
            error: function (xhr, status, error) {
                console.error('Error en la llamada AJAX:', {
                    status: status,
                    error: error,
                    response: xhr.responseText
                });
                container.html('<div class="alert alert-danger">Error al cargar las ubicaciones</div>');
            }
        });
    }

</script>

<!--begin: General scripts-->
<script>
    document.addEventListener("keydown", function (event) {
        if (event.key === "Enter") {
            // Simula el clic en el botón "Siguiente"
            event.preventDefault(); // Evita comportamientos por defecto del Enter
            $('[data-kt-element*="-next"]:visible').click();
        }
    });

    function Create() {
        const form = document.getElementById('kt_create_app_form');
        // Confirmación de envío
        Swal.fire({
            title: '¿Estás seguro?',
            text: "¿Deseas enviar el formulario?",
            icon: 'question',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Sí, enviar',
            cancelButtonText: 'Cancelar'
        }).then((result) => {
            if (result.isConfirmed) {
                //MOSTRAR SPINNER
                $('#submitButton').prop('disabled', true); // Deshabilitar el botón
                $('#btnGuardar').hide(); // Ocultar el texto
                $('.indicator-progress').show(); // Mostrar el spinner
                // Envía el formulario
                form.submit();
            }
        });
    }


</script>
<!--end: General scripts-->
<!--begin: Stepper Logic-->
<script>
    $(document).ready(function () {


        //Al hacer click en create
        $('[data-kt-element*="-create"]').on('click', function (e) {
            e.preventDefault();
            if (validateCurrentStep()) {
                Create();
            }
        });

        //funcion para validar stepper
        function validateCurrentStep() {
            var currentSection = $('.current[data-kt-stepper-element="content"]');
            var currentIndex = $('[data-kt-stepper-element="content"]').index(currentSection);
            var inputs = currentSection.find('input[required], select[required]');
            var isValid = true;

            inputs.each(function () {
                var element = $(this);
                if (!element.val() || element.hasClass('invalid')) {
                    var parentDiv = element.closest('.input-group');
                    isValid = false;
                    element.addClass('invalid');
                    parentDiv.next('.invalid-feedback').show();
                } else {
                    var parentDiv = element.closest('.input-group');
                    element.removeClass('invalid');
                    parentDiv.next('.invalid-feedback').hide();
                }
            });

            return isValid;

        }

    });
</script>
<!--end: Stepper Logic-->
<!--begin: Stepper Validations-->
<script>

    //FUNCION QUE REALIZA LAS VALIDACIONES A CADA ELEMENTO DENTRO DEL MODAL
    function ValidateElement(element) {
        var isValid = true;
        var validationTypes = element.data('validation').split(',');

        for (var i = 0; i < validationTypes.length; i++) {
            var validationType = validationTypes[i];
            switch (validationType) {
                case 'required':
                    if (!element.val()) {
                        isValid = false;
                        console.log("Required")
                        ShowValidationError(element, 'Este campo es obligatorio.');
                        return isValid;
                    } else {
                        RemoveValidationError(element);
                    }
                    break;
                case 'digits':
                    var digits = element.data('digits').toString().split(',').map(Number);
                    if (!digits.includes(element.val().length)) {
                        isValid = false;
                        console.log("Digits")
                        ShowValidationError(element, `El campo debe tener exactamente ${digits.join(' o ')} dígitos.`);
                        return isValid;
                    } else {
                        RemoveValidationError(element);
                    }
                    break;
                case 'email':
                    if (element.val() == "") {
                        var parentDiv = element.closest('.input-group');
                        element.removeClass('valid');
                        element.removeClass('invalid');
                        parentDiv.next('.invalid-feedback').hide();
                        element.removeAttr('required');
                    }
                    else if (!ValidateEmail(element.val())) {
                        isValid = false;
                        console.log("email")
                        ShowValidationError(element, 'El correo electrónico no es válido.');
                        element.attr('required', true);
                        return isValid;
                    }
                    else {

                        RemoveValidationError(element);
                        element.attr('required', true);
                    }
                    break;

                case 'numeric':
                    if (!ValidateNumeric(element.val())) {
                        isValid = false;
                        console.log("numeric")
                        ShowValidationError(element, 'El campo solo debe contener valores numéricos.');
                        return isValid;
                    } else {
                        RemoveValidationError(element);
                    }
                    break;

                case 'decimal':
                    console.log("decimal")

                    if (!ValidateDecimal(element.val())) {
                        isValid = false;
                        console.log("decimal")
                        ShowValidationError(element, 'El número decimal no es válido.');
                        return isValid;
                    } else {
                        RemoveValidationError(element);
                    }
                    break;

                case 'contract-format':
                    var formattedValue = formatContract(element.val());
                    element.val(formattedValue);
                    if (!ValidateContractFormat(formattedValue)) {
                        isValid = false;
                        console.log("contract-format")
                        ShowValidationError(element, 'El contrato no sigue el formato correcto.');
                        return isValid;
                    } else {
                        RemoveValidationError(element);
                    }
                    break;


                default:
                    break;
            }
        }

        return isValid;
    }

    //FUNCION QUE MUESTRA LOS ATRIBUTOS DE ERROR DEL ELEMENTO
    function ShowValidationError(element, message) {
        var parentDiv = element.closest('.input-group');
        element.removeClass('valid');
        element.addClass('invalid');
        parentDiv.next('.invalid-feedback').text(message).show();
    }

    //FUNCION QUE RETIRA LOS ATRIBUTOS Y CLASES DE ERROR Y AGREGA ATRIBUTOS Y CLASES DE EXITO
    function RemoveValidationError(element) {
        var parentDiv = element.closest('.input-group');
        element.removeClass('invalid');
        parentDiv.next('.invalid-feedback').hide();
        element.addClass('valid');
    }

    //FUNCION PARA VALIDAR CORREO
    function ValidateEmail(email) {
        // Expresión regular para validar un correo electrónico
        var emailPattern = /^[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/;

        // Verificar si el email pasa la validación básica
        if (!emailPattern.test(email)) {
            return false;
        }

        // Verificar que no termine con un punto
        if (email.endsWith('.')) {
            return false;
        }

        // Si pasa ambas validaciones, el email es válido
        return true;
    }

    //FUNCION PARA VALIDAR VALORES NUMERICOS
    function ValidateNumeric(number) {
        return /^\d+$/.test(number);
    }


    function ValidateDecimal(string) {
        // Si está vacío o no es string, retornar false
        if (!string || typeof string !== 'string') {
            return false;
        }

        // Eliminar espacios en blanco
        string = string.trim();

        // Verificar si es un número válido
        // Acepta:
        // - Cero (0)
        // - Números enteros positivos (ej: 1, 2, 123)
        // - Números decimales positivos (ej: 0.45, 123.45)
        // - No permite múltiples puntos decimales
        const decimalRegex = /^(0|[1-9]\d*)\.?\d*$/;
        return decimalRegex.test(string);
    }

    //VALIDACION DE FORMATO DE CONTRATOS
    function ValidateContractFormat(contract) {
        // Expresión regular para validar el formato del contrato
        var contractPattern = /^\d{4}-\d{4}-\d{2}-\d{8}$/;
        return contractPattern.test(contract);
    }

    //CONVERTIDOR DE NUMEROS DECIMALES
    function formatDecimal(value) {

        // Convertir el valor en un número flotante
        let number = parseFloat(value);

        if (isNaN(number)) {
            return 'Invalid number';
        }

        // Formatear el número con comas en los miles y dos decimales
        return number.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
    }

    //CONVERTIDOR A FORMATO DE CONTRATO
    function formatContract(value) {

        var value = value.replace(/\D/g, '');
        console.log(value);
        var sections = [4, 4, 2, 8];
        var formattedValue = '';
        var index = 0;

        for (var i = 0; i < sections.length; i++) {
            if (value.length > index) {
                var endIndex = index + sections[i];
                if (value.length > endIndex) {
                    if (value.length > 18 && i === 3) formattedValue += value.substring(index, endIndex);
                    else formattedValue += value.substring(index, endIndex) + '-';
                } else {
                    formattedValue += value.substring(index, value.length);
                }
            }
            index += sections[i];
        }

        return formattedValue;
    }

</script>
<!--end: Stepper Validations-->

<div class="container my-4">
    <h2>Registro de Movimiento</h2><br />
    <!-- Primera Card -->
    <div class="card mb-4">
        <div class="row">
            <!-- Fila 1, Columna 1 -->
            <div class="col-12 mb-3">
                <div class="card">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-6 col-sm-4">
                                <label class="form-label" style="color:dimgray">Lote</label>
                                <label class="d-block">@Model.RiceLotDetailDTO.Code</label>
                            </div>
                            <div class="col-6 col-sm-4">
                                <label class="form-label" style="color:dimgray">Fecha de Venc.</label>
                                <label class="d-block">@Convert.ToDateTime(Model.RiceLotDetailDTO.ExpirationDate).ToString("dd/MM/yyyy")</label>
                            </div>
                            <!-- Obligar a las siguientes columnas a pasar a una nueva línea en el breakpoint md y hacia arriba -->
                            <div class="w-100 d-none d-md-block"></div>

                            <div class="col-6 col-sm-4">
                                <label class="form-label" style="color:dimgray">Última Ubicación</label>
                                <label class="d-block">@Model.RiceLotDetailDTO.LastUbication</label>
                            </div>
                            <div class="col-6 col-sm-4">
                                <label class="form-label" style="color:dimgray">Clasificación</label>
                                <label class="d-block">@Model.RiceLotDetailDTO.Classification</label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <br />
    <div class="card mb-4">
        <div class="row">
            <!-- Fila 1, Columna 1 -->
            <div class="col-12 mb-3">
                <div class="card">
                    <div class="card-body">
                        <form asp-action="CreateRiceLotMovement" method="post" class="row g-3 needs-validation" novalidate="novalidate" id="kt_create_app_form">

                            <!--Inputs de zona y ubicacion actual del lote-->
                            <input hidden name="IdZoneOrigin" value="@Model.RiceLotDetailDTO.IdZone" />
                            <input hidden name="IdRiceLot" value="@Model.RiceLotDetailDTO.IdLot" />
                            <input hidden name="IdOrigin" value="@Model.RiceLotDetailDTO.IdLastUbication" />


                            <div class="row">
                                <div class="col-lg-6 mb-3">
                                    <div class="input-group">
                                        <div class="form-floating">
                                            <select id="Zone" name="IdZoneDestination" class="form-select" required data-validation="required" oninput="ValidateElement($(this))" onchange="ShowZoneUbications($(this))">
                                                <option value="">Seleccione un almacén destino</option>
                                                @foreach (var item in Model.Zones)
                                                {
                                                    <option value="@item.IdZone"
                                                            data-rows="@item.Rows"
                                                            data-columns="@item.Columns">
                                                        @item.Name
                                                    </option>
                                                }
                                            </select>
                                            <label class="form-label" for="Zone">Almacén Destino</label>
                                        </div>
                                    </div>
                                    <!-- Mensaje de feedback inmediatamente después del input-group -->
                                    <div class="invalid-feedback"> Este campo es obligatorio.</div>
                                </div>

                            </div>

                            <div id="SeeUbicationSection" style="display: none;">
                                <!--begin::Label-->
                                <label class="d-flex align-items-center fs-5 fw-semibold mb-4">
                                    <span>Selecciona una ubicacion dentro del almacén</span>
                                </label>
                                <!--end::Label-->

                                <a id="btnOpenModal" class="btn btn-sm btn-primary me-2 mb-3" data-bs-toggle="modal" data-bs-target="#kt_modal_1">
                                    Ver Ubicaciones
                                </a>
                            </div>
                            <div id="UbicationSelectedLabel" style="display: none;">
                                <!--begin::Label-->
                                <label class="d-flex align-items-center fs-5 fw-semibold mb-4">
                                    <span>Ubicacion escogida</span>
                                </label>
                                <!--end::Label-->
                            </div>

                            <div class="row" id="UbicationSelectedInput" style="display: none;">
                                <div class="col-lg-6 mb-3">
                                    <div class="input-group">
                                        <div class="form-floating">
                                            <input readonly id="UbicationSelected" type="text" class="form-control" placeholder="Ubicación" oninput="ValidateElement($(this))" />
                                            <label class="form-label required" for="UbicationSelected">Ubicación</label>
                                        </div>
                                        <div class="invalid-feedback"> Este campo es obligatorio.</div>
                                    </div>
                                </div>

                            </div>


                            <input hidden id="IdUbication" name="IdDestination">

                            @await Html.PartialAsync("~/Views/RiceLot/_SeeUbicationsModalPartial.cshtml")

                            <!--begin::Actions-->
                            <div class="d-flex flex-stack justify-content-end">
                                <button type="button" id="submitButton" class="btn btn-lg btn-primary" data-kt-element="finish-create">
                                    <span id="btnGuardar" class="indicator-label">Crear</span>
                                    <span class="indicator-progress">
                                        Por favor, espera...
                                        <span class="spinner-border spinner-border-sm align-middle ms-2"></span>
                                    </span>
                                </button>
                            </div>
                            <!--end::Actions-->

                        </form>

                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!--end:::Main-->
<footer id="footer">
    <div class="container">
        <div class="row">
            <div class="col-4 mb-3">
                <form class="form-inline" id="RiceLotMovementForm">
                    <input type="hidden" value="@ViewBag.IdLot" name="IdLot" id="IdLot" />
                    <a id="RiceLotMovementLink" class="d-block">
                        <i class="fas fa-list"></i>
                        <span class="d-block">Movimiento</span>
                    </a>
                </form>
            </div>
            <div class="col-4 mb-3">
                <a id="open-camera" class="d-block">
                    <i class="fas fa-camera"></i>
                    <span class="d-block">Scaner</span>
                </a>
            </div>
            <div class="col-4 mb-3">
                <form class="form-inline" asp-controller="Home" asp-action="Exit" id="logoutForm" method="post">
                    <a id="logoutLink" class="d-block">
                        <i class="fas fa-user"></i>
                        <span class="d-block">Cerrar Sesión</span>
                    </a>
                </form>
            </div>
        </div>
    </div>
</footer>