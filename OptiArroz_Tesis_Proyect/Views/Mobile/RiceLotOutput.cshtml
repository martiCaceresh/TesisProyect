@model OptiArroz_Tesis_Proyect.Models.ViewModels.RiceLotOutputVM

@using Microsoft.AspNetCore.Identity
@using OptiArroz_Tesis_Proyect.Models.Entities
@using OptiArroz_Tesis_Proyect.Models.Utils;

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - OptiArroz</title>

    <link rel="shortcut icon" href="~/assets/media/logos/favicon.ico" />
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Inter:300,400,500,600,700" />
    <!--end::Fonts-->
    <!--begin::Vendor Stylesheets(used for this page only)-->
    <link href="~/assets/plugins/custom/fullcalendar/fullcalendar.bundle.css" rel="stylesheet" type="text/css" />
    <link href="~/assets/plugins/custom/datatables/datatables.bundle.css" rel="stylesheet" type="text/css" />
    <link href="~/assets/plugins/custom/vis-timeline/vis-timeline.bundle.css" rel="stylesheet" type="text/css" />
    <!--end::Vendor Stylesheets-->
    <!--begin::Global Stylesheets Bundle(mandatory for all pages)-->
    <link href="~/assets/plugins/global/plugins.bundle.css" rel="stylesheet" type="text/css" />
    <link href="~/assets/css/style.bundle.css" rel="stylesheet" type="text/css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">

    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
    <style>
        /* Estilos para Carga de archivos */
        #areaArrastreFile,
        #areaArrastreBankConfirmation {
            border: 2px dashed #007bff;
            padding: 20px;
            text-align: center;
            position: relative;
            transition: min-height 0.3s ease;
        }

        .areaArrastreHoverFile
        .areaArrastreHoverBankConfirmation {
            border-color: #0056b3;
        }

        .botonArchivoFile
        .botonArchivoBankConfirmation {
            display: inline-block;
            padding: 10px 20px;
            background-color: #007bff;
            color: #fff;
            cursor: pointer;
        }

        .botonArchivoFile:hover,
        .botonArchivoBankConfirmation:hover {
            background-color: #0056b3;
        }

        #cardArchivoFile,
        #cardArchivoBankConfirmation {
            display: none;
            max-width: 400px;
            margin: 10px auto;
        }

        #btnCargarFile,
        #btnCargarBankConfirmation {
            display: none;
        }

    </style>
    <style>

        .form-control {
            text-transform: uppercase;
        }

        .page-loader {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            justify-content: center;
            align-items: center;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 9999;
            visibility: hidden;
        }

        .circle {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            margin-right: 10px;
        }

        #kt_app_header_wrapper {
            display: none;
        }

        #footer {
            background-color: #f8f9fa;
            position: fixed;
            left: 0;
            bottom: 0;
            width: 100%;
            text-align: center;
        }

            #footer a {
                color: #495057;
                text-decoration: none;
            }

                #footer a:hover {
                    color: #007bff;
                }

            #footer .fa {
                margin: 0 10px;
            }

        /* Estilo para la pantalla de carga */
        #loader {
            position: fixed;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: white; /* Cambia el color de fondo a blanco o cualquier color sólido que desees */
            z-index: 9999;
            display: flex;
            justify-content: center;
            align-items: center;
            opacity: 1; /* La pantalla de carga será sólida sin transparencia */
        }

        #loaderDark {
            position: fixed;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: #131313; /* Cambia el color de fondo a blanco o cualquier color sólido que desees */
            z-index: 9999;
            display: flex;
            justify-content: center;
            align-items: center;
            opacity: 1; /* La pantalla de carga será sólida sin transparencia */
        }
        /* Estilo para el spinner o indicador de carga */
        .spinner {
            min-width: 110px;
            min-height: 110px;
            max-width: 150px; /* Ajusta el tamaño máximo del GIF según sea necesario */
            max-height: 150px; /* Ajusta el tamaño máximo del GIF según sea necesario */
            width: auto;
            height: auto;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }

        /* Estilos personalizados opcionales para la transición */
        .page-transition {
            opacity: 1;
            transition: opacity 0.5s ease-in-out;
        }

            .page-transition.fade-out {
                opacity: 0;
            }
    </style>

</head>

<body id="kt_app_body" data-kt-app-layout="light-header" data-kt-app-header-fixed="true" data-kt-app-toolbar-enabled="true" class="app-default">
    <div id="loader" style="display:none;">
        <img id="spinner" src="~/assets/media/loaders/CargaGeneralApp.gif" alt="Cargando..." class="h-sm-100px h-lg-150px app-sidebar-logo-default theme-light-show spinner" />
    </div>
    <div id="loaderDark" style="display:none;">
        <img id="spinnerDark" src="~/assets/media/loaders/CargaGeneralAppDark.gif" alt="Cargando..." class="h-sm-100px h-lg-150px app-sidebar-logo-default theme-dark-show spinner" />
    </div>

    <!--begin::Wrapper-->
    <div class="app-wrapper flex-column flex-row-fluid" id="kt_app_wrapper">
        <!--begin::Main-->
        <div class="app-main flex-column flex-row-fluid" id="kt_app_main">
            <!--begin::Content wrapper-->
            <div class="d-flex flex-column flex-column-fluid">
                <!--begin::Content-->
                <div id="kt_app_content" class="app-content flex-column-fluid">
                    <!--begin::Content container-->
                    <div id="kt_app_content_container" class="app-container container-xxl">
                        <div class="container my-4">
                            <h2>Registro de Salida @Model.RiceLotDetailDTO.Code</h2><br />
                            <!-- Primera Card -->
                            <div class="card mb-4">
                                <div class="row">
                                    <!-- Fila 1, Columna 1 -->
                                    <div class="col-12 mb-3">
                                        <div class="card">
                                            <div class="card-body">
                                                <div class="row">
                                                    <div class="col-6 col-sm-4 mb-3">
                                                        <label class="form-label" style="color:dimgray">Stock actual</label>
                                                        <label class="d-block">@Model.RiceLotDetailDTO.LeftoverQuantity</label>
                                                    </div>
                                                    <div class="col-6 col-sm-4 mb-3">
                                                        <label class="form-label" style="color:dimgray">Fecha de Venc.</label>
                                                        <label class="d-block">@Convert.ToDateTime(Model.RiceLotDetailDTO.ExpirationDate).ToString("dd/MM/yyyy")</label>
                                                    </div>
                                                    <!-- Obligar a las siguientes columnas a pasar a una nueva línea en el breakpoint md y hacia arriba -->
                                                    <div class="w-100 d-none d-md-block"></div>

                                                    <div class="col-6 col-sm-4 mb-3">
                                                        <label class="form-label" style="color:dimgray">Última Ubicación</label>
                                                        <label class="d-block">@Model.RiceLotDetailDTO.LastUbication</label>
                                                    </div>
                                                    <div class="col-6 col-sm-4 mb-3">
                                                        <label class="form-label" style="color:dimgray">Clasificación</label>
                                                        <label class="d-block">@Model.RiceLotDetailDTO.Classification</label>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <br />
                            <div class="card mb-4">
                                <div class="row">
                                    <!-- Fila 1, Columna 1 -->
                                    <div class="col-12 mb-3">
                                        <div class="card">
                                            <form asp-controller="RiceSacksOutput" asp-action="CreateOutput" enctype="multipart/form-data" method="post" class="row g-3 needs-validation" novalidate="novalidate" id="kt_create_app_form">
                                                <input hidden id="IdLot" name="IdLot" value="@Model.RiceLotDetailDTO.IdLot" />
                                                <div data-kt-stepper-element="content" class="card-body">
                                                    <div class="row">
                                                        <div class="col-12 mb-3">
                                                            <div class="input-group">
                                                                <div class="form-floating">
                                                                    <select id="outputType" name="IdRiceSacksOutputType" class="form-select" required data-validation="required" data-dropdown-parent="#files_modal" oninput="ValidateElement($(this))">
                                                                        <option value="">Seleccione un tipo de salida</option>
                                                                        @foreach (var item in Model.RiceSacksOutputTypes)
                                                                        {
                                                                            <option value="@item.IdRiceSacksOutputType">@item.name</option>
                                                                        }
                                                                    </select>
                                                                    <label class="form-label required">Tipo de Salida</label>
                                                                </div>
                                                            </div>
                                                            <div class="invalid-feedback">Este campo es obligatorio.</div>
                                                        </div>
                                                        <div class="col-12 mb-3">
                                                            <div class="form-floating">
                                                                <textarea id="observations" name="Observations" class="form-control"
                                                                          placeholder="Observaciones" data-kt-autosize="true"
                                                                          style="height: 80px"></textarea>
                                                                <label class="form-label">Observaciones</label>
                                                            </div>
                                                        </div>

                                                        <div class="col-12 mb-3">
                                                            <div class="input-group">
                                                                <div class="form-floating">
                                                                    <input id="QuantitySacks" min="1" max="@Model.RiceLotDetailDTO.LeftoverQuantity" name="QuantitySacks" type="number" required data-validation="required,numeric" class="form-control" placeholder="Cantidad de sacos" oninput="ValidateElement($(this))" />
                                                                    <label class="form-label required" for="QuantitySacks">Cantidad de sacos</label>
                                                                </div>
                                                            </div>
                                                            <div class="invalid-feedback"> Este campo es obligatorio.</div>
                                                        </div>
                                                        <div class="col-12 mb-3">
                                                            <label class="fs-6 fw-semibold mb-2">Adjunta el documento de orden de salida</label>

                                                            <div class="input-group row">
                                                                <div class="col" id="areaArrastreBankConfirmation" ondrop="handleDropBankConfirmation(event)" ondragover="handleDragOver(event)">
                                                                    <div id="agregarArchivoBankConfirmation" style="display: block;">
                                                                        <strong>Arrastra aquí</strong>
                                                                        <br />
                                                                        <strong>o</strong>
                                                                        <br />
                                                                        <label for="inputArchivoBankConfirmation" class="btn btn-sm btn-lg btn-primary">
                                                                            Selecciona un archivo
                                                                            <input type="file" name="TechnicalEspecification" required data-validation="required" id="inputArchivoBankConfirmation" style="display: none;" onchange="handleArchivoSeleccionadoBankConfirmation()" oninput="ValidateElement($(this))" />
                                                                        </label>
                                                                    </div>

                                                                    <div id="cardArchivoBankConfirmation">
                                                                        <div class="d-flex flex-stack py-4">
                                                                            <div class="d-flex align-items-center">
                                                                                <!--begin::Avatar-->
                                                                                <div class="symbol symbol-35px">
                                                                                    <img id="fileIconBankConfirmation" src="" alt="icon" />
                                                                                </div>
                                                                                <!--end::Avatar-->
                                                                                <!--begin::Details-->
                                                                                <div class="ms-6">
                                                                                    <p id="nombreArchivoBankConfirmation" class="fs-5 fw-bold text-gray-900 mb-2">Nombre</p>
                                                                                    <div id="fileSizeBankConfirmation" class="fw-semibold text-muted"></div>
                                                                                </div>
                                                                                <!--end::Details-->
                                                                            </div>
                                                                            <!--begin::Menu-->
                                                                            <div class="min-w-100px">
                                                                                <button type="button" class="close btn btn-sm btn-lg btn-primary" onclick="quitarArchivoBankConfirmation()">
                                                                                    <!--begin::Indicator label-->
                                                                                    <span class="indicator-label">Quitar</span>
                                                                                    <!--end::Indicator label-->
                                                                                </button>
                                                                            </div>
                                                                            <!--end::Menu-->
                                                                        </div>
                                                                    </div>

                                                                </div>
                                                            </div>
                                                            <!-- Error message -->
                                                            <div class="invalid-feedback">Este campo es obligatorio.</div>
                                                        </div>
                                                    </div>
                                                    <!--begin::Actions-->
                                                    <div class="d-flex flex-stack justify-content-end">
                                                        <button type="button" id="submitButton" class="btn btn-lg btn-primary" data-kt-element="finish-create">
                                                            <span id="btnGuardar" class="indicator-label">Crear</span>
                                                            <span class="indicator-progress">
                                                                Por favor, espera...
                                                                <span class="spinner-border spinner-border-sm align-middle ms-2"></span>
                                                            </span>
                                                        </button>
                                                    </div>
                                                    <!--end::Actions-->
                                                </div>
                                            </form>
                                            
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <br />

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    @if (TempData.ContainsKey("SuccessMessage"))
    {
        @await Html.PartialAsync("_Alert", new AlertModel("success", "Éxito" ,TempData["SuccessMessage"]?.ToString() ?? string.Empty ))
    }
    @if (TempData.ContainsKey("ErrorMessage"))
    {
        @await Html.PartialAsync("_Alert", new AlertModel("error", "Error" ,TempData["ErrorMessage"]?.ToString() ?? string.Empty ))
    }
    <!--end:::Main-->
    <footer class="footer">
        <div class="container">
            <div class="row justify-content-evenly">
                <div class="col-3 mb-3 align-items-center">
                    <form asp-action="Lot" class="form-inline" id="RiceLotForm">
                        <input type="hidden" value="@ViewBag.IdLot" name="IdLot" id="IdLot" />
                        <a id="RiceLotLink" class="d-block">
                            <i class="fas fa-list"></i>
                            <span class="d-block">Lote</span>
                        </a>
                    </form>
                </div>
                <div class="col-3 mb-3 align-items-center">
                    <form asp-action="RiceLotMovement" class="form-inline" id="RiceLotMovementForm">
                        <input type="hidden" value="@ViewBag.IdLot" name="IdLot" id="IdLot" />
                        <a id="RiceLotMovementLink" class="text-center">
                            <i class="fas fa-list"></i>
                            <span class="d-block">Movimiento</span>
                        </a>
                    </form>
                </div>
                <div class="col-3 mb-3 align-items-center">
                    <a id="open-camera" class="text-center">
                        <i class="fas fa-camera"></i>
                        <span class="d-block">Scaner</span>
                    </a>
                </div>
                <div class="col-3 mb-3 align-items-center">
                    <form class="form-inline" asp-controller="Home" asp-action="Exit" id="logoutForm" method="post">
                        <a id="logoutLink" class="text-center">
                            <i class="fas fa-user"></i>
                            <span class="d-block">Cerrar Sesión</span>
                        </a>
                    </form>
                </div>
            </div>
        </div>
    </footer>


    <!--TEMPLATE SCRIPTS-->
    <script>var hostUrl = "assets/";</script>
    <!--begin::Global Javascript Bundle(mandatory for all pages)-->
    <script src="~/assets/plugins/global/plugins.bundle.js"></script>
    <script src="~/assets/js/scripts.bundle.js"></script>

    <!--end::Global Javascript Bundle-->
    <!--begin::Vendors Javascript(used for this page only)-->
    <script src="~/assets/plugins/custom/fullcalendar/fullcalendar.bundle.js"></script>
    <script src="https://cdn.amcharts.com/lib/5/index.js"></script>
    <script src="https://cdn.amcharts.com/lib/5/xy.js"></script>
    <script src="https://cdn.amcharts.com/lib/5/percent.js"></script>
    <script src="https://cdn.amcharts.com/lib/5/radar.js"></script>
    <script src="https://cdn.amcharts.com/lib/5/themes/Animated.js"></script>
    <script src="https://cdn.amcharts.com/lib/5/map.js"></script>
    <script src="https://cdn.amcharts.com/lib/5/geodata/worldLow.js"></script>
    <script src="https://cdn.amcharts.com/lib/5/geodata/continentsLow.js"></script>
    <script src="https://cdn.amcharts.com/lib/5/geodata/usaLow.js"></script>
    <script src="https://cdn.amcharts.com/lib/5/geodata/worldTimeZonesLow.js"></script>
    <script src="https://cdn.amcharts.com/lib/5/geodata/worldTimeZoneAreasLow.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.10/signalr.min.js"></script>
    <script src="~/assets/plugins/custom/datatables/datatables.bundle.js"></script>
    <script src="~/assets/plugins/custom/tinymce/tinymce.bundle.js"></script>
    <link href="assets/plugins/global/plugins.bundle.css" rel="stylesheet" type="text/css" />
    <script src="assets/plugins/global/plugins.bundle.js"></script>
    <script src="~/assets/plugins/custom/ckeditor/ckeditor-document.bundle.js"></script>
    <script src="~/assets/plugins/custom/vis-timeline/vis-timeline.bundle.js"></script>
    <!--end::Vendors Javascript-->
    <!--begin::Custom Javascript(used for this page only)-->
    <script src="~/assets/js/custom/apps/file-manager/list.js"></script>
    <script src="~/assets/js/widgets.bundle.js"></script>
    <script src="~/assets/js/custom/widgets.js"></script>
    <script src="~/assets/js/custom/apps/chat/chat.js"></script>
    <script src="~/assets/js/custom/utilities/modals/upgrade-plan.js"></script>
    <script src="~/assets/js/custom/utilities/modals/create-app.js"></script>
    <script src="~/assets/js/custom/utilities/modals/users-search.js"></script>


    <script>
        function showLoader() {
            const loader = document.getElementById('loader');
            const loaderDark = document.getElementById('loaderDark');

            const isDarkMode = document.documentElement.getAttribute('data-bs-theme') === 'dark';

            if (isDarkMode) {
                loaderDark.style.display = 'block';
                loader.style.display = 'none';
            } else {
                loader.style.display = 'block';
                loaderDark.style.display = 'none';
            }
        }

        function hideLoader() {
            document.getElementById('loader').style.display = 'none';
            document.getElementById('loaderDark').style.display = 'none';
        }



        // Mostrar el spinner cuando el usuario navega a una nueva página
        window.addEventListener('beforeunload', function () {
            showLoader(); // Muestra el loader antes de salir de la página
        });
    </script>
    <!--begin: Upload Files-->
    <script>
        // Función para formatear bytes a kilobytes, megabytes, etc.
        function formatBytes(bytes, decimals = 2) {
            if (bytes === 0) return '0 Bytes';

            const k = 1024;
            const dm = decimals < 0 ? 0 : decimals;
            const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];

            const i = Math.floor(Math.log(bytes) / Math.log(k));

            return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
        }

        // Función para manejar el evento de arrastrar
        function handleDragOver(event) {
            event.preventDefault();
        }

        // Funciones para manejar el evento de arrastrar y soltar para Confirmación de banco
        var archivoBankConfirmation;

        function handleDropBankConfirmation(event) {
            event.preventDefault();

            archivoBankConfirmation = event.dataTransfer.files[0];

            var inputArchivoBankConfirmation = document.getElementById("inputArchivoBankConfirmation");

            // Asignar directamente el archivo al input
            inputArchivoBankConfirmation.files = event.dataTransfer.files;

            // Validar que solo se haya seleccionado un archivo
            if (archivoBankConfirmation) {
                var extensionPermitida = ['pdf'];
                var extensionArchivo = archivoBankConfirmation.name.split('.').pop().toLowerCase();

                if (extensionPermitida.indexOf(extensionArchivo) === -1) {
                    Swal.fire({
                        icon: 'error', // El tipo de alerta (success, error, info, etc.)
                        title: 'Error', // El título de la alerta
                        text: 'Por favor, selecciona un archivo con extensión .pdf.', // El mensaje de la alerta
                        showConfirmButton: true // Muestra un botón de confirmación
                    });
                    return;
                }

                var nombreCompleto = archivoBankConfirmation.name;
                var maxCaracteres = 20;

                if (nombreCompleto.length > maxCaracteres) {
                    var nombreSinExtension = nombreCompleto.slice(0, maxCaracteres - extensionArchivo.length - 1);
                    var nombreCorto = nombreSinExtension + "...." + extensionArchivo;
                } else {
                    var nombreCorto = nombreCompleto;
                }

                // Actualizar la imagen de fileIcon según la extensión
                var fileIcon = document.getElementById("fileIconBankConfirmation");
                var iconPath = "../assets/media/opplus/";

                switch (extensionArchivo) {
                    case 'xlsx':
                    case 'xls':
                        iconPath += "xls.png";
                        break;
                    case 'pdf':
                        iconPath += "pdf.png";
                        break;
                    default:
                        // Puedes proporcionar una imagen predeterminada o manejar otros casos aquí
                        iconPath += "default.png";
                }

                fileIcon.src = iconPath;

                // Actualizar el elemento de entrada de archivo con el nombre del archivo
                document.getElementById("nombreArchivoBankConfirmation").innerHTML = nombreCorto;
                document.getElementById("fileSizeBankConfirmation").innerHTML = formatBytes(archivoBankConfirmation.size);
                document.getElementById("cardArchivoBankConfirmation").style.display = "block";
                document.getElementById("agregarArchivoBankConfirmation").style.display = "none";

                // Ajustar la altura del área de arrastre para contener el archivo seleccionado
                var areaArrastre = document.getElementById("areaArrastreBankConfirmation");
                areaArrastre.style.minHeight = areaArrastre.offsetHeight + "px";
            }
        }

        // Función para quitar el archivo seleccionado
        function quitarArchivoBankConfirmation() {
            archivoBankConfirmation = null;
            document.getElementById("nombreArchivoBankConfirmation").innerHTML = "Ningún archivo seleccionado";
            document.getElementById("inputArchivoBankConfirmation").value = "";
            document.getElementById("cardArchivoBankConfirmation").style.display = "none";
            document.getElementById("agregarArchivoBankConfirmation").style.display = "block";

            // Restablecer la altura mínima del área de arrastre
            document.getElementById("areaArrastreBankConfirmation").style.minHeight = "";
        }

        //Función para manejar el cambio en el input de archivo
        function handleArchivoSeleccionadoBankConfirmation() {
            archivoBankConfirmation = document.getElementById("inputArchivoBankConfirmation").files[0];

            // Actualizar el elemento de entrada de archivo con el nombre del archivo
            if (archivoBankConfirmation) {
                var extensionPermitida = ['pdf'];
                var extensionArchivo = archivoBankConfirmation.name.split('.').pop().toLowerCase();

                if (extensionPermitida.indexOf(extensionArchivo) === -1) {
                    Swal.fire({
                        icon: 'error', // El tipo de alerta (success, error, info, etc.)
                        title: 'Error', // El título de la alerta
                        text: 'Por favor, selecciona un archivo con extensión .pdf.', // El mensaje de la alerta
                        showConfirmButton: true // Muestra un botón de confirmación
                    });
                    return;
                }

                var nombreCompleto = archivoBankConfirmation.name;
                var maxCaracteres = 20;

                if (nombreCompleto.length > maxCaracteres) {
                    var nombreSinExtension = nombreCompleto.slice(0, maxCaracteres - extensionArchivo.length - 1);
                    var nombreCorto = nombreSinExtension + "...." + extensionArchivo;
                } else {
                    var nombreCorto = nombreCompleto;
                }

                // Actualizar la imagen de fileIcon según la extensión
                var fileIcon = document.getElementById("fileIconBankConfirmation");
                var iconPath = "../assets/media/opplus/";

                switch (extensionArchivo) {
                    case 'xlsx':
                    case 'xls':
                        iconPath += "xls.png";
                        break;
                    case 'pdf':
                        iconPath += "pdf.png";
                        break;
                    default:
                        // Puedes proporcionar una imagen predeterminada o manejar otros casos aquí
                        iconPath += "default.png";
                }

                fileIcon.src = iconPath;

                document.getElementById("nombreArchivoBankConfirmation").innerHTML = nombreCorto;
                document.getElementById("fileSizeBankConfirmation").innerHTML = formatBytes(archivoBankConfirmation.size);
                document.getElementById("cardArchivoBankConfirmation").style.display = "block";
                document.getElementById("agregarArchivoBankConfirmation").style.display = "none";

                // Ajustar la altura del área de arrastre para contener el archivo seleccionado
                var areaArrastre = document.getElementById("areaArrastreBankConfirmation");
                areaArrastre.style.minHeight = areaArrastre.offsetHeight + "px";
            }
        }
    </script>
    <!--end: Upload Files-->
    <!--begin: General scripts-->
    <script>
        document.addEventListener("keydown", function (event) {
            if (event.key === "Enter") {
                // Simula el clic en el botón "Siguiente"
                event.preventDefault(); // Evita comportamientos por defecto del Enter
                $('[data-kt-element*="-next"]:visible').click();
            }
        });

        function Create() {
            const form = document.getElementById('kt_create_app_form');
            // Confirmación de envío
            Swal.fire({
                title: '¿Estás seguro?',
                text: "¿Deseas enviar el formulario?",
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Sí, enviar',
                cancelButtonText: 'Cancelar'
            }).then((result) => {
                if (result.isConfirmed) {
                    //MOSTRAR SPINNER
                    $('#submitButton').prop('disabled', true); // Deshabilitar el botón
                    $('#btnGuardar').hide(); // Ocultar el texto
                    $('.indicator-progress').show(); // Mostrar el spinner
                    // Envía el formulario
                    form.submit();
                }
            });
        }


    </script>
    <!--end: General scripts-->
    <!--end::Style-->
    <!--begin: Stepper Logic-->
    <script>
        $(document).ready(function () {


            //Al hacer click en create
            $('[data-kt-element*="-create"]').on('click', function (e) {
                e.preventDefault();
                if (validateCurrentStep()) {
                    Create();
                }
            });

            //funcion para validar stepper
            function validateCurrentStep() {
                var currentSection = $('.current[data-kt-stepper-element="content"]');
                var currentIndex = $('[data-kt-stepper-element="content"]').index(currentSection);
                var inputs = currentSection.find('input[required], select[required]');
                var isValid = true;

                inputs.each(function () {
                    var element = $(this);
                    if (!element.val() || element.hasClass('invalid')) {
                        var parentDiv = element.closest('.input-group');
                        isValid = false;
                        element.addClass('invalid');
                        parentDiv.next('.invalid-feedback').show();
                    } else {
                        var parentDiv = element.closest('.input-group');
                        element.removeClass('invalid');
                        parentDiv.next('.invalid-feedback').hide();
                    }
                });

                return isValid;

            }

        });
    </script>
    <!--end: Stepper Logic-->
    <!--begin: Stepper Validations-->
    <script>

        //FUNCION QUE REALIZA LAS VALIDACIONES A CADA ELEMENTO DENTRO DEL MODAL
        function ValidateElement(element) {
            var isValid = true;
            var validationTypes = element.data('validation').split(',');

            for (var i = 0; i < validationTypes.length; i++) {
                var validationType = validationTypes[i];
                switch (validationType) {
                    case 'required':
                        if (!element.val()) {
                            isValid = false;
                            console.log("Required")
                            ShowValidationError(element, 'Este campo es obligatorio.');
                            return isValid;
                        } else {
                            RemoveValidationError(element);
                        }
                        break;
                    case 'digits':
                        var digits = element.data('digits').toString().split(',').map(Number);
                        if (!digits.includes(element.val().length)) {
                            isValid = false;
                            console.log("Digits")
                            ShowValidationError(element, `El campo debe tener exactamente ${digits.join(' o ')} dígitos.`);
                            return isValid;
                        } else {
                            RemoveValidationError(element);
                        }
                        break;
                    case 'email':
                        if (element.val() == "") {
                            var parentDiv = element.closest('.input-group');
                            element.removeClass('valid');
                            element.removeClass('invalid');
                            parentDiv.next('.invalid-feedback').hide();
                            element.removeAttr('required');
                        }
                        else if (!ValidateEmail(element.val())) {
                            isValid = false;
                            console.log("email")
                            ShowValidationError(element, 'El correo electrónico no es válido.');
                            element.attr('required', true);
                            return isValid;
                        }
                        else {

                            RemoveValidationError(element);
                            element.attr('required', true);
                        }
                        break;

                    case 'numeric':
                        if (!ValidateNumeric(element.val())) {
                            isValid = false;
                            console.log("numeric")
                            ShowValidationError(element, 'El campo solo debe contener valores numéricos.');
                            return isValid;
                        } else {
                            RemoveValidationError(element);
                        }
                        break;

                    case 'decimal':
                        console.log("decimal")

                        if (!ValidateDecimal(element.val())) {
                            isValid = false;
                            console.log("decimal")
                            ShowValidationError(element, 'El número decimal no es válido.');
                            return isValid;
                        } else {
                            RemoveValidationError(element);
                        }
                        break;

                    case 'contract-format':
                        var formattedValue = formatContract(element.val());
                        element.val(formattedValue);
                        if (!ValidateContractFormat(formattedValue)) {
                            isValid = false;
                            console.log("contract-format")
                            ShowValidationError(element, 'El contrato no sigue el formato correcto.');
                            return isValid;
                        } else {
                            RemoveValidationError(element);
                        }
                        break;


                    default:
                        break;
                }
            }

            return isValid;
        }

        //FUNCION QUE MUESTRA LOS ATRIBUTOS DE ERROR DEL ELEMENTO
        function ShowValidationError(element, message) {
            var parentDiv = element.closest('.input-group');
            element.removeClass('valid');
            element.addClass('invalid');
            parentDiv.next('.invalid-feedback').text(message).show();
        }

        //FUNCION QUE RETIRA LOS ATRIBUTOS Y CLASES DE ERROR Y AGREGA ATRIBUTOS Y CLASES DE EXITO
        function RemoveValidationError(element) {
            var parentDiv = element.closest('.input-group');
            element.removeClass('invalid');
            parentDiv.next('.invalid-feedback').hide();
            element.addClass('valid');
        }

        //FUNCION PARA VALIDAR CORREO
        function ValidateEmail(email) {
            // Expresión regular para validar un correo electrónico
            var emailPattern = /^[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/;

            // Verificar si el email pasa la validación básica
            if (!emailPattern.test(email)) {
                return false;
            }

            // Verificar que no termine con un punto
            if (email.endsWith('.')) {
                return false;
            }

            // Si pasa ambas validaciones, el email es válido
            return true;
        }

        //FUNCION PARA VALIDAR VALORES NUMERICOS
        function ValidateNumeric(number) {
            return /^\d+$/.test(number);
        }


        function ValidateDecimal(string) {
            // Si está vacío o no es string, retornar false
            if (!string || typeof string !== 'string') {
                return false;
            }

            // Eliminar espacios en blanco
            string = string.trim();

            // Verificar si es un número válido
            // Acepta:
            // - Cero (0)
            // - Números enteros positivos (ej: 1, 2, 123)
            // - Números decimales positivos (ej: 0.45, 123.45)
            // - No permite múltiples puntos decimales
            const decimalRegex = /^(0|[1-9]\d*)\.?\d*$/;
            return decimalRegex.test(string);
        }

        //VALIDACION DE FORMATO DE CONTRATOS
        function ValidateContractFormat(contract) {
            // Expresión regular para validar el formato del contrato
            var contractPattern = /^\d{4}-\d{4}-\d{2}-\d{8}$/;
            return contractPattern.test(contract);
        }

        //CONVERTIDOR DE NUMEROS DECIMALES
        function formatDecimal(value) {

            // Convertir el valor en un número flotante
            let number = parseFloat(value);

            if (isNaN(number)) {
                return 'Invalid number';
            }

            // Formatear el número con comas en los miles y dos decimales
            return number.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
        }

        //CONVERTIDOR A FORMATO DE CONTRATO
        function formatContract(value) {

            var value = value.replace(/\D/g, '');
            console.log(value);
            var sections = [4, 4, 2, 8];
            var formattedValue = '';
            var index = 0;

            for (var i = 0; i < sections.length; i++) {
                if (value.length > index) {
                    var endIndex = index + sections[i];
                    if (value.length > endIndex) {
                        if (value.length > 18 && i === 3) formattedValue += value.substring(index, endIndex);
                        else formattedValue += value.substring(index, endIndex) + '-';
                    } else {
                        formattedValue += value.substring(index, value.length);
                    }
                }
                index += sections[i];
            }

            return formattedValue;
        }

    </script>
    <!--end: Stepper Validations-->
    <script>
        const logoutLink = document.getElementById('logoutLink');

        if (logoutLink) {
            logoutLink.addEventListener('click', function (event) {
                event.preventDefault();  // Prevenir el comportamiento por defecto del enlace
                document.getElementById('logoutForm').submit();  // Enviar el formulario
            });
        }

        const riceLotMovementLink = document.getElementById('RiceLotMovementLink');

        if (riceLotMovementLink) {
            riceLotMovementLink.addEventListener('click', function (event) {
                event.preventDefault(); // Evitar que el formulario se envíe de forma tradicional
                document.getElementById('RiceLotMovementForm').submit();
            });
        }

        const riceLotLink = document.getElementById('RiceLotLink');

        if (riceLotLink) {
            riceLotLink.addEventListener('click', function (event) {
                event.preventDefault(); // Evitar que el formulario se envíe de forma tradicional
                document.getElementById('RiceLotForm').submit();
            });
        }

    </script>
</body>
</html>
