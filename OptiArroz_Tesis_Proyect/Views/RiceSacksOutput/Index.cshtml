@using OptiArroz_Tesis_Proyect.Models.Utils
@using OptiArroz_Tesis_Proyect.Models.ViewModels
@model OptiArroz_Tesis_Proyect.Models.ViewModels.RiceSacksOutputVM

@{
    ViewData["Title"] = "Salida de Sacos";
}

<!--start::Style-->
<style>
    .form-control {
        text-transform: uppercase;
    }

    .modal-dialog-custom-lg {
        max-width: 90%;
    }

    .file-card {
        padding: 5px 7.8px 5px 7.8px;
        margin: 5px 0;
        border: 1px solid #ddd;
        border-radius: 5px;
        background-color: #f9f9f9;
    }

    .file-info {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .file-details {
        display: flex;
        align-items: center;
    }

    .accion-icono {
        margin-right: 10px;
        cursor: pointer;
    }

    .page-loader {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 9999;
        visibility: hidden;
    }

    .circle {
        width: 20px;
        height: 20px;
        border-radius: 50%;
        margin-right: 10px;
    }

    .iconElement:hover {
        background-color: lightgray;
    }

        .iconElement:hover i {
            color: white;
        }


    .ql-attachment svg {
        stroke: #808080; /* Color gris por defecto */
        transition: stroke 0.1s ease; /* Transición suave para el cambio de color */
    }

    .ql-attachment:hover svg {
        stroke: var(--bs-primary); /* Cambio a color azul al pasar el mouse */
    }

</style>
<script>

    function Navigate(Page) {
        // Lista de todas las páginas posibles
        const pages = ["RiceSacksOutput", "RiceSacksConsultation"];  // Agrega aquí todos los IDs de tus vistas

        $.ajax({
            url: '/RiceSacksOutput/Index',
            type: 'GET',
            data: { Page: Page },  // Enviar el parámetro Page al controlador
            success: function (response) {
                // Ocultar todas las vistas
                pages.forEach(page => {
                    $("#" + page).hide();
                });

                // Cargar y mostrar la vista solicitada
                $("#" + Page).html(response).show();
            },
            error: function (error) {
                console.log('Error:', error);
            }
        });
    }

</script>

<!--begin: Stepper Validations-->
<script>

    //FUNCION QUE REALIZA LAS VALIDACIONES A CADA ELEMENTO DENTRO DEL MODAL
    function ValidateElement(element) {
        var isValid = true;
        var validationTypes = element.data('validation').split(',');

        for (var i = 0; i < validationTypes.length; i++) {
            var validationType = validationTypes[i];
            switch (validationType) {
                case 'required':
                    if (!element.val()) {
                        isValid = false;
                        console.log("Required")
                        ShowValidationError(element, 'Este campo es obligatorio.');
                        return isValid;
                    } else {
                        RemoveValidationError(element);
                    }
                    break;
                case 'digits':
                    var digits = element.data('digits').toString().split(',').map(Number);
                    if (!digits.includes(element.val().length)) {
                        isValid = false;
                        console.log("Digits")
                        ShowValidationError(element, `El campo debe tener exactamente ${digits.join(' o ')} dígitos.`);
                        return isValid;
                    } else {
                        RemoveValidationError(element);
                    }
                    break;
                case 'email':
                    if (element.val() == "") {
                        var parentDiv = element.closest('.input-group');
                        element.removeClass('valid');
                        element.removeClass('invalid');
                        parentDiv.next('.invalid-feedback').hide();
                        element.removeAttr('required');
                    }
                    else if (!ValidateEmail(element.val())) {
                        isValid = false;
                        console.log("email")
                        ShowValidationError(element, 'El correo electrónico no es válido.');
                        element.attr('required', true);
                        return isValid;
                    }
                    else {

                        RemoveValidationError(element);
                        element.attr('required', true);
                    }
                    break;

                case 'numeric':
                    if (!ValidateNumeric(element.val())) {
                        isValid = false;
                        console.log("numeric")
                        ShowValidationError(element, 'El campo solo debe contener valores numéricos.');
                        return isValid;
                    } else {
                        RemoveValidationError(element);
                    }
                    break;

                case 'decimal':
                    console.log("decimal")

                    if (!ValidateDecimal(element.val())) {
                        isValid = false;
                        console.log("decimal")
                        ShowValidationError(element, 'El número decimal no es válido.');
                        return isValid;
                    } else {
                        RemoveValidationError(element);
                    }
                    break;

                case 'contract-format':
                    var formattedValue = formatContract(element.val());
                    element.val(formattedValue);
                    if (!ValidateContractFormat(formattedValue)) {
                        isValid = false;
                        console.log("contract-format")
                        ShowValidationError(element, 'El contrato no sigue el formato correcto.');
                        return isValid;
                    } else {
                        RemoveValidationError(element);
                    }
                    break;


                default:
                    break;
            }
        }

        return isValid;
    }

    //FUNCION QUE MUESTRA LOS ATRIBUTOS DE ERROR DEL ELEMENTO
    function ShowValidationError(element, message) {
        var parentDiv = element.closest('.input-group');
        element.removeClass('valid');
        element.addClass('invalid');
        parentDiv.next('.invalid-feedback').text(message).show();
    }

    //FUNCION QUE RETIRA LOS ATRIBUTOS Y CLASES DE ERROR Y AGREGA ATRIBUTOS Y CLASES DE EXITO
    function RemoveValidationError(element) {
        var parentDiv = element.closest('.input-group');
        element.removeClass('invalid');
        parentDiv.next('.invalid-feedback').hide();
        element.addClass('valid');
    }

    //FUNCION PARA VALIDAR CORREO
    function ValidateEmail(email) {
        // Expresión regular para validar un correo electrónico
        var emailPattern = /^[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/;

        // Verificar si el email pasa la validación básica
        if (!emailPattern.test(email)) {
            return false;
        }

        // Verificar que no termine con un punto
        if (email.endsWith('.')) {
            return false;
        }

        // Si pasa ambas validaciones, el email es válido
        return true;
    }

    //FUNCION PARA VALIDAR VALORES NUMERICOS
    function ValidateNumeric(number) {
        return /^\d+$/.test(number);
    }


    function ValidateDecimal(string) {
        // Si está vacío o no es string, retornar false
        if (!string || typeof string !== 'string') {
            return false;
        }

        // Eliminar espacios en blanco
        string = string.trim();

        // Verificar si es un número válido
        // Acepta:
        // - Cero (0)
        // - Números enteros positivos (ej: 1, 2, 123)
        // - Números decimales positivos (ej: 0.45, 123.45)
        // - No permite múltiples puntos decimales
        const decimalRegex = /^(0|[1-9]\d*)\.?\d*$/;
        return decimalRegex.test(string);
    }

    //VALIDACION DE FORMATO DE CONTRATOS
    function ValidateContractFormat(contract) {
        // Expresión regular para validar el formato del contrato
        var contractPattern = /^\d{4}-\d{4}-\d{2}-\d{8}$/;
        return contractPattern.test(contract);
    }

    //CONVERTIDOR DE NUMEROS DECIMALES
    function formatDecimal(value) {

        // Convertir el valor en un número flotante
        let number = parseFloat(value);

        if (isNaN(number)) {
            return 'Invalid number';
        }

        // Formatear el número con comas en los miles y dos decimales
        return number.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
    }

    //CONVERTIDOR A FORMATO DE CONTRATO
    function formatContract(value) {

        var value = value.replace(/\D/g, '');
        console.log(value);
        var sections = [4, 4, 2, 8];
        var formattedValue = '';
        var index = 0;

        for (var i = 0; i < sections.length; i++) {
            if (value.length > index) {
                var endIndex = index + sections[i];
                if (value.length > endIndex) {
                    if (value.length > 18 && i === 3) formattedValue += value.substring(index, endIndex);
                    else formattedValue += value.substring(index, endIndex) + '-';
                } else {
                    formattedValue += value.substring(index, value.length);
                }
            }
            index += sections[i];
        }

        return formattedValue;
    }

</script>
<!--end: Stepper Validations-->
<!--begin: Stepper Logic-->
<script>
    $(document).ready(function () {
        // Configuración inicial del stepper
        var totalSteps = $('[data-kt-stepper-element="content"]').length;

        // Al hacer clic en "Next"
        $('[data-kt-element*="-next"]').on('click', function () {
            if (validateCurrentStep()) {
                console.log("Paso valido")
                navigateStepper(1);
            }
            console.log("Paso no valido")
        });

        // Al hacer clic en "Previous"
        $('[data-kt-element*="-previous"]').on('click', function () {
            navigateStepper(-1);
        });

        //Al hacer click en create
        $('[data-kt-element*="-finish"]').on('click', function (e) {
            e.preventDefault();
            if (validateCurrentStep()) {
                Create();
            }
        });

        //funcion para validar stepper
        function validateCurrentStep() {
            var currentSection = $('.current[data-kt-stepper-element="content"]');
            var currentIndex = $('[data-kt-stepper-element="content"]').index(currentSection);
            var inputs = currentSection.find('input[required], select[required]');
            var isValid = true;



            inputs.each(function () {
                var element = $(this);
                if (!element.val() || element.hasClass('invalid')) {
                    var parentDiv = element.closest('.input-group');
                    isValid = false;
                    element.addClass('invalid');
                    parentDiv.next('.invalid-feedback').show();
                } else {
                    var parentDiv = element.closest('.input-group');
                    element.removeClass('invalid');
                    parentDiv.next('.invalid-feedback').hide();
                }
            });


            if (isValid && currentIndex === 0) { //Llenar el select de sacos de la seccion 2
                var Sacks = [];
                $('[data-repeater-sack]').each(function (index) {
                    if (index !== 1) {
                        Sacks.push($(this).val().trim());
                    }
                });

                $('[data-repeater-ricesack]').each(function (index) {
                    // Limpiar las opciones existentes manteniendo solo la opción por defecto
                    $(this).find('option:not(:first)').remove();

                    // Llenar el select con los valores de la lista Sacks
                    Sacks.forEach(function (sackValue) {
                        if (sackValue !== '') {
                            let option = new Option(sackValue, sackValue);
                            $(this).append(option);
                        }
                    }.bind(this));
                });

            }

            return isValid;

        }

        function navigateStepper(direction) {
            // Encuentra la sección actual
            var currentSection = $('.current[data-kt-stepper-element="content"]');

            // Encuentra el índice de la sección actual
            var currentIndex = $('[data-kt-stepper-element="content"]').index(currentSection);

            // Calcula el próximo índice
            var nextIndex = currentIndex + direction;

            // Asegúrate de que el próximo índice esté en el rango válido
            if (nextIndex >= 0 && nextIndex < totalSteps) {
                // Oculta la sección actual
                currentSection.removeClass('current');

                // Muestra la siguiente o anterior sección
                $('[data-kt-stepper-element="content"]:eq(' + nextIndex + ')').addClass('current');

                // Actualiza la navegación del stepper
                $('.stepper-item.current').removeClass('current');
                $('[data-kt-stepper-element="nav"]:eq(' + nextIndex + ')').addClass('current');
            }
        }

    });

    function navigateStepperByStep(step) {
        // Encuentra la sección actual
        var currentSection = $('.current[data-kt-stepper-element="content"]');

        // Calcula el próximo índice
        var nextIndex = step;

        // Oculta la sección actual
        currentSection.removeClass('current');

        // Muestra la siguiente o anterior sección
        $('[data-kt-stepper-element="content"]:eq(' + nextIndex + ')').addClass('current');

        // Actualiza la navegación del stepper
        $('.stepper-item.current').removeClass('current');
        $('[data-kt-stepper-element="nav"]:eq(' + nextIndex + ')').addClass('current');

    }
</script>
<!--end: Stepper Logic-->


<!--begin::Main-->
<div class="app-main flex-column flex-row-fluid" id="kt_app_main">
    <!--begin::Content wrapper-->
    <div class="d-flex flex-column flex-column-fluid">
        <div id="RiceSacksOutput">
            @await Html.PartialAsync("_RiceSacksOutputPartial", Model)
        </div>

        <!-- Vista de consulta de lotes (inicialmente oculta) -->
        <div id="RiceSacksConsultation" style="display: none;">
            @await Html.PartialAsync("_RiceSacksConsultationPartial" , new RiceSacksConsultationVM())
        </div>
    </div>
    <!--end::Content wrapper-->
</div>
<!--end:::Main-->

@if (TempData.ContainsKey("SuccessMessage"))
{
    @await Html.PartialAsync("_Alert", new AlertModel("success", "Éxito" ,TempData["SuccessMessage"]?.ToString() ?? string.Empty ))
}
@if (TempData.ContainsKey("ErrorMessage"))
{
    @await Html.PartialAsync("_Alert", new AlertModel("error", "Error" ,TempData["ErrorMessage"]?.ToString() ?? string.Empty ))
}