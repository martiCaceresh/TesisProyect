@model OptiArroz_Tesis_Proyect.Models.ViewModels.RiceSacksConsultationVM
@using OptiArroz_Tesis_Proyect.Models.Utils

@{
    ViewData["Title"] = "Consulta de sacos";
}
<style>
    /* Estilos para Carga de archivos */
    #areaArrastreFile,
    #areaArrastreBankConfirmation {
        border: 2px dashed #007bff;
        padding: 20px;
        text-align: center;
        position: relative;
        transition: min-height 0.3s ease;
    }

    .areaArrastreHoverFile
    .areaArrastreHoverBankConfirmation {
        border-color: #0056b3;
    }

    .botonArchivoFile
    .botonArchivoBankConfirmation {
        display: inline-block;
        padding: 10px 20px;
        background-color: #007bff;
        color: #fff;
        cursor: pointer;
    }

    .botonArchivoFile:hover,
    .botonArchivoBankConfirmation:hover {
        background-color: #0056b3;
    }

    #cardArchivoFile,
    #cardArchivoBankConfirmation {
        display: none;
        max-width: 400px;
        margin: 10px auto;
    }

    #btnCargarFile,
    #btnCargarBankConfirmation {
        display: none;
    }

</style>
<style>

    .modal-dialog-custom-lg {
        max-width: 90%;
    }
</style>


<!--begin:: INICIALIZACION DE COMPONENTES-->
<script>
    // Reinicializar menús
    document.querySelectorAll('[data-kt-menu="true"]').forEach(element => {
        const menu = KTMenu.getInstance(element);
        if (menu) {
            menu.destroy();
        }
        new KTMenu(element);
    });
</script>
<script>
   

    $("#kt_riceSacksConsultation_app_form").submit(function (e) {
        e.preventDefault();

        var form = $(this);
        if(validateForm(form)){
            $('#loadingSpinner').css('display', 'block');
            $('#kt_datatable_zero_RiceSacksConsultationTable').hide();

            $.ajax({
                url: form.attr('action'),
                type: 'POST',
                data: form.serialize(),
                success: function (response) {
                    $('#loadingSpinner').hide();
                    $('#kt_datatable_zero_RiceSacksConsultationTable').show();
                    $("#RiceSacksConsultationSection").html(response);
                },
                error: function () {
                    $('#loadingSpinner').hide();
                    $('#kt_datatable_zero_RiceSacksConsultationTable').show();
                    console.log("Error al actualizar la tabla.");
                }
            });
        }
            
        
    });



    //funcion para validar stepper
    function validateForm(form) {
        var inputs = form.find('input[required], select[required]');
        var isValid = true;

        inputs.each(function () {
            var element = $(this);
            if (!element.val() || element.hasClass('invalid')) {
                var parentDiv = element.closest('.input-group');
                isValid = false;
                element.addClass('invalid');
                parentDiv.next('.invalid-feedback').show();
            } else {
                var parentDiv = element.closest('.input-group');
                element.removeClass('invalid');
                parentDiv.next('.invalid-feedback').hide();
            }
        });

        return isValid;

    }
</script>
<script>
    function addConsultation() {
        // Obtener los valores del formulario
        const selectElement = document.getElementById('IdClassification');
        const quantityElement = document.getElementById('QuantitySelected');

        // Validar que los campos no estén vacíos
        if (!selectElement.value || !quantityElement.value) {
            return false;
        }

        // Obtener el texto de la clasificación seleccionada
        const selectedOption = selectElement.options[selectElement.selectedIndex];
        const classificationName = selectedOption.text;
        const classificationId = selectElement.value;
        const quantitySelected = parseInt(quantityElement.value);

        // Obtener la instancia de DataTable
        const dataTable = $('#kt_datatable_zero_RiceSacksConsultationTable').DataTable();

        // Crear el botón de eliminar con estilos
        const deleteButton = `
            <button type="button"
                    class="btn btn-icon btn-light-danger btn-sm"
                    onclick="deleteConsultationRow(this)">
                <i class="fa-solid fa-trash"></i>
            </button>`;

        // Verificar si la clasificación ya existe
        const existingRow = dataTable.rows().data().toArray().findIndex(row => row[0] === classificationId);

        if (existingRow !== -1) {
            // Si la clasificación existe, reemplazar la cantidad y resetear el resultado
            dataTable.row(existingRow).data([
                classificationId,      // ID (oculto)
                classificationName,    // Nombre de clasificación
                quantitySelected,      // Nueva cantidad (reemplazando la anterior)
                'Pendiente',          // Resetear a Pendiente
                deleteButton          // Botón de eliminar
            ]).draw(false);
        } else {
            // Agregar nueva fila
            dataTable.row.add([
                classificationId,      // ID (oculto)
                classificationName,    // Nombre de clasificación
                quantitySelected,      // Cantidad
                'Pendiente',          // Resultado
                deleteButton          // Botón de eliminar
            ]).draw(false);
        }

        return true;
    }
    // Función para reiniciar completamente (limpiar tabla y formulario)
    function resetFilters() {
        const dataTable = $('#kt_datatable_zero_RiceSacksConsultationTable').DataTable();
    
        // Limpiar todos los datos de la tabla
        dataTable.clear().draw();
    }
    function deleteConsultationRow(button) {
        const dataTable = $('#kt_datatable_zero_RiceSacksConsultationTable').DataTable();
        const row = dataTable.row($(button).closest('tr'));
        row.remove().draw(false);
    }
</script>
<!--begin: Upload Files-->
<script>
    // Función para formatear bytes a kilobytes, megabytes, etc.
    function formatBytes(bytes, decimals = 2) {
        if (bytes === 0) return '0 Bytes';

        const k = 1024;
        const dm = decimals < 0 ? 0 : decimals;
        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];

        const i = Math.floor(Math.log(bytes) / Math.log(k));

        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
    }

    // Función para manejar el evento de arrastrar
    function handleDragOver(event) {
        event.preventDefault();
    }

    // Funciones para manejar el evento de arrastrar y soltar para Confirmación de banco
    var archivoBankConfirmation;

    function handleDropBankConfirmation(event) {
        event.preventDefault();

        archivoBankConfirmation = event.dataTransfer.files[0];

        var inputArchivoBankConfirmation = document.getElementById("inputArchivoBankConfirmation");

        // Asignar directamente el archivo al input
        inputArchivoBankConfirmation.files = event.dataTransfer.files;

        // Validar que solo se haya seleccionado un archivo
        if (archivoBankConfirmation) {
            var extensionPermitida = ['pdf'];
            var extensionArchivo = archivoBankConfirmation.name.split('.').pop().toLowerCase();

            if (extensionPermitida.indexOf(extensionArchivo) === -1) {
                Swal.fire({
                    icon: 'error', // El tipo de alerta (success, error, info, etc.)
                    title: 'Error', // El título de la alerta
                    text: 'Por favor, selecciona un archivo con extensión .pdf.', // El mensaje de la alerta
                    showConfirmButton: true // Muestra un botón de confirmación
                });
                return;
            }

            var nombreCompleto = archivoBankConfirmation.name;
            var maxCaracteres = 20;

            if (nombreCompleto.length > maxCaracteres) {
                var nombreSinExtension = nombreCompleto.slice(0, maxCaracteres - extensionArchivo.length - 1);
                var nombreCorto = nombreSinExtension + "...." + extensionArchivo;
            } else {
                var nombreCorto = nombreCompleto;
            }

            // Actualizar la imagen de fileIcon según la extensión
            var fileIcon = document.getElementById("fileIconBankConfirmation");
            var iconPath = "../assets/media/opplus/";

            switch (extensionArchivo) {
                case 'xlsx':
                case 'xls':
                    iconPath += "xls.png";
                    break;
                case 'pdf':
                    iconPath += "pdf.png";
                    break;
                default:
                    // Puedes proporcionar una imagen predeterminada o manejar otros casos aquí
                    iconPath += "default.png";
            }

            fileIcon.src = iconPath;

            // Actualizar el elemento de entrada de archivo con el nombre del archivo
            document.getElementById("nombreArchivoBankConfirmation").innerHTML = nombreCorto;
            document.getElementById("fileSizeBankConfirmation").innerHTML = formatBytes(archivoBankConfirmation.size);
            document.getElementById("cardArchivoBankConfirmation").style.display = "block";
            document.getElementById("agregarArchivoBankConfirmation").style.display = "none";

            // Ajustar la altura del área de arrastre para contener el archivo seleccionado
            var areaArrastre = document.getElementById("areaArrastreBankConfirmation");
            areaArrastre.style.minHeight = areaArrastre.offsetHeight + "px";
        }
    }

    // Función para quitar el archivo seleccionado
    function quitarArchivoBankConfirmation() {
        archivoBankConfirmation = null;
        document.getElementById("nombreArchivoBankConfirmation").innerHTML = "Ningún archivo seleccionado";
        document.getElementById("inputArchivoBankConfirmation").value = "";
        document.getElementById("cardArchivoBankConfirmation").style.display = "none";
        document.getElementById("agregarArchivoBankConfirmation").style.display = "block";

        // Restablecer la altura mínima del área de arrastre
        document.getElementById("areaArrastreBankConfirmation").style.minHeight = "";
    }

    //Función para manejar el cambio en el input de archivo
    function handleArchivoSeleccionadoBankConfirmation() {
        archivoBankConfirmation = document.getElementById("inputArchivoBankConfirmation").files[0];

        // Actualizar el elemento de entrada de archivo con el nombre del archivo
        if (archivoBankConfirmation) {
            var extensionPermitida = ['pdf'];
            var extensionArchivo = archivoBankConfirmation.name.split('.').pop().toLowerCase();

            if (extensionPermitida.indexOf(extensionArchivo) === -1) {
                Swal.fire({
                    icon: 'error', // El tipo de alerta (success, error, info, etc.)
                    title: 'Error', // El título de la alerta
                    text: 'Por favor, selecciona un archivo con extensión .pdf.', // El mensaje de la alerta
                    showConfirmButton: true // Muestra un botón de confirmación
                });
                return;
            }

            var nombreCompleto = archivoBankConfirmation.name;
            var maxCaracteres = 20;

            if (nombreCompleto.length > maxCaracteres) {
                var nombreSinExtension = nombreCompleto.slice(0, maxCaracteres - extensionArchivo.length - 1);
                var nombreCorto = nombreSinExtension + "...." + extensionArchivo;
            } else {
                var nombreCorto = nombreCompleto;
            }

            // Actualizar la imagen de fileIcon según la extensión
            var fileIcon = document.getElementById("fileIconBankConfirmation");
            var iconPath = "../assets/media/opplus/";

            switch (extensionArchivo) {
                case 'xlsx':
                case 'xls':
                    iconPath += "xls.png";
                    break;
                case 'pdf':
                    iconPath += "pdf.png";
                    break;
                default:
                    // Puedes proporcionar una imagen predeterminada o manejar otros casos aquí
                    iconPath += "default.png";
            }

            fileIcon.src = iconPath;

            document.getElementById("nombreArchivoBankConfirmation").innerHTML = nombreCorto;
            document.getElementById("fileSizeBankConfirmation").innerHTML = formatBytes(archivoBankConfirmation.size);
            document.getElementById("cardArchivoBankConfirmation").style.display = "block";
            document.getElementById("agregarArchivoBankConfirmation").style.display = "none";

            // Ajustar la altura del área de arrastre para contener el archivo seleccionado
            var areaArrastre = document.getElementById("areaArrastreBankConfirmation");
            areaArrastre.style.minHeight = areaArrastre.offsetHeight + "px";
        }
    }
</script>
<!--end: Upload Files-->


<script>
    // IIFE para evitar contaminación del scope global
    (function () {
        // Singleton para manejar los estilos de tooltip
        const TooltipStyleManager = {
            styles: `
                <style id="tooltipCustomStyles">
                    .tooltip-inner {
                        min-width: 200px;
                        max-width: 400px !important;
                        padding: 1rem !important;
                        text-align: left !important;
                        font-size: 0.875rem !important;
                        line-height: 1.5 !important;
                        font-family: inherit !important;
                        white-space: pre-wrap !important;
                        border-radius: 0.475rem !important;
                        box-shadow: 0 0.5rem 1.5rem 0.5rem rgba(0, 0, 0, 0.075) !important;
                    }

                    .tooltip-error .tooltip-inner {
                        background-color: #fff1f1 !important;
                        color: #f1416c !important;
                        border: 1px solid #f1416c !important;
                    }

                    .tooltip-warning .tooltip-inner {
                        background-color: #fff8dd !important;
                        color: #ffc700 !important;
                        border: 1px solid #ffc700 !important;
                    }

                    .tooltip-success .tooltip-inner {
                        background-color: #e8fff3 !important;
                        color: #50cd89 !important;
                        border: 1px solid #50cd89 !important;
                    }

    @@media (max-width: 768px) {
                        .tooltip-inner {
                            max-width: 300px !important;
                            font-size: 0.8rem !important;
                        }
                    }
                </style>`,

            init() {
                if (!document.getElementById('tooltipCustomStyles')) {
                    document.head.insertAdjacentHTML('beforeend', this.styles);
                }
            }
        };

        // Clase para manejar los tooltips
        class TooltipManager {
            static getStatusIcon(status) {
                const icons = {
                    1: ['fa-circle-check text-success', 'tooltip-success'],
                    2: ['fa-triangle-exclamation text-warning', 'tooltip-warning'],
                    3: ['fa-circle-xmark text-danger', 'tooltip-error'],
                    default: ['fa-circle-question text-muted', '']
                };

                const [iconClass, tooltipClass] = icons[status] || icons.default;
                return {
                    iconHtml: `<i class="fa-solid ${iconClass} fs-2"></i>`,
                    tooltipClass
                };
            }

            static createTooltipHtml(iconHtml, tooltipClass, message) {
                return `
                    <span class="mx-2"
                        data-bs-toggle="tooltip"
                        data-bs-placement="top"
                        data-bs-html="true"
                        data-tooltip-class="${tooltipClass}"
                        title="${message}">
                        ${iconHtml}
                    </span>`;
            }

            static initializeTooltips() {
                // Destruir tooltips existentes antes de reinicializar
                $('[data-bs-toggle="tooltip"]').tooltip('dispose');

                // Inicializar nuevos tooltips
                $('[data-bs-toggle="tooltip"]').tooltip({
                    template: '<div class="tooltip" role="tooltip">' +
                        '<div class="tooltip-arrow"></div>' +
                        '<div class="tooltip-inner"></div>' +
                        '</div>',
                    trigger: 'hover',
                    animation: true,
                    delay: { show: 100, hide: 100 },
                    html: true
                });

                // Aplicar clases personalizadas
                $(document).on('inserted.bs.tooltip', '[data-bs-toggle="tooltip"]', function () {
                    const tooltipClass = $(this).data('tooltip-class');
                    if (tooltipClass) {
                        const tooltipId = $(this).attr('aria-describedby');
                        if (tooltipId) {
                            $(`#${tooltipId}`).addClass(tooltipClass);
                        }
                    }
                });
            }
        }

        // Función principal de consulta de stock
        window.StockConsultation = function () {
            // Inicializar estilos de tooltip
            TooltipStyleManager.init();

            const dataTable = $('#kt_datatable_zero_RiceSacksConsultationTable').DataTable();
            const data = dataTable.rows().data().toArray();

            if (data.length === 0) {
                Swal.fire({
                    text: "Debe agregar al menos un registro para procesar la consulta",
                    icon: "warning",
                    buttonsStyling: false,
                    confirmButtonText: "Ok, entendido",
                    customClass: {
                        confirmButton: "btn btn-primary"
                    }
                });
                return;
            }

            const StockConsultationJson = data.map(row => ({
                IdClassification: parseInt(row[0]),
                QuantitySelected: parseInt(row[2])
            }));

            const processingAlert = Swal.fire({
                text: "Procesando consulta...",
                icon: "info",
                buttonsStyling: false,
                showConfirmButton: false,
                allowOutsideClick: false
            });

            $.ajax({
                url: '/Classification/GetStockConsultation',
                type: 'POST',
                data: JSON.stringify(StockConsultationJson),
                contentType: 'application/json; charset=utf-8',
                dataType: 'json',
                success: function (response) {
                    processingAlert.close();

                    if (response.success) {
                        dataTable.rows().every(function (index) {
                            const rowData = this.data();
                            const idClassification = parseInt(rowData[0]);
                            const result = response.data.find(r => r.idClassification === idClassification);

                            if (result) {
                                const { iconHtml, tooltipClass } = TooltipManager.getStatusIcon(result.status);
                                const tooltipHtml = TooltipManager.createTooltipHtml(
                                    iconHtml,
                                    tooltipClass,
                                    result.tooltipMessage
                                );
                                dataTable.cell(index, 3).data(tooltipHtml);
                            }
                        });

                        dataTable.draw(false);

                        // Inicializar tooltips después de que la tabla se haya redibujado
                        setTimeout(() => {
                            TooltipManager.initializeTooltips();
                        }, 100);

                        Swal.fire({
                            text: "Consulta procesada exitosamente",
                            icon: "success",
                            buttonsStyling: false,
                            confirmButtonText: "Ok",
                            customClass: {
                                confirmButton: "btn btn-primary"
                            }
                        });
                    } else {
                        Swal.fire({
                            text: "Error al procesar la consulta",
                            icon: "error",
                            buttonsStyling: false,
                            confirmButtonText: "Ok",
                            customClass: {
                                confirmButton: "btn btn-danger"
                            }
                        });
                    }
                },
                error: function (xhr, status, error) {
                    processingAlert.close();

                    Swal.fire({
                        text: "Error al procesar la consulta: " + (xhr.responseJSON?.message || "Error desconocido"),
                        icon: "error",
                        buttonsStyling: false,
                        confirmButtonText: "Ok",
                        customClass: {
                            confirmButton: "btn btn-primary"
                        }
                    });
                }
            });
        };
    })();
    function validateTableStatus() {
        // Obtener la instancia de DataTable
        const dataTable = $('#kt_datatable_zero_RiceSacksConsultationTable').DataTable();
        const data = dataTable.rows().data().toArray();

        // Validar si hay registros en la tabla
        if (data.length === 0) {
            Swal.fire({
                title: "Sin registros",
                text: "Debe agregar al menos un registro para procesar la salida",
                icon: "warning",
                buttonsStyling: false,
                confirmButtonText: "Entendido",
                customClass: {
                    confirmButton: "btn btn-primary"
                }
            });
            return false;
        }

        // Validar si hay registros pendientes
        const hasPendingRecords = data.some(row => row[3] === 'Pendiente');
        if (hasPendingRecords) {
            Swal.fire({
                title: "Consulta pendiente",
                text: "Debe procesar la consulta de stock antes de registrar la salida",
                icon: "warning",
                buttonsStyling: false,
                confirmButtonText: "Entendido",
                customClass: {
                    confirmButton: "btn btn-primary"
                }
            });
            return false;
        }

        // Validar si hay registros con stock insuficiente
        const hasInsufficientStock = data.some(row => {
            const cell = row[3]; // Columna del resultado
            // Buscar el ícono de error (cruz roja) en el contenido de la celda
            const tempDiv = document.createElement('div');
            tempDiv.innerHTML = cell;
            return tempDiv.querySelector('.fa-circle-xmark') !== null;
        });

        if (hasInsufficientStock) {
            Swal.fire({
                title: "Stock insuficiente",
                text: "Hay pedidos que no pueden ser atendidos por falta de stock. Por favor, elimine estos registros para continuar.",
                icon: "error",
                buttonsStyling: false,
                confirmButtonText: "Entendido",
                customClass: {
                    confirmButton: "btn btn-danger"
                }
            });
            return false;
        }

        return true;
    }
    // Función modificada para el botón de registro
    document.getElementById('btnShowRiceSackOutputModal').addEventListener('click', function (e) {
        e.preventDefault();

        // Realizar todas las validaciones antes de abrir el modal
        if (validateTableStatus()) {
            InitializedModal();
        }
    });
    
    function InitializedModal() {

        // Si el modal ya existe, solo lo abrimos
        if (document.getElementById('outputModal')) {
            const modal = new bootstrap.Modal(document.getElementById('outputModal'));
            modal.show();
            return;
        }

        // Crear el modal dinámicamente
        const modalHtml = `
        <div class="modal fade" id="outputModal" tabindex="-1" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered mw-800px">
                <div class="modal-content">
                    <div class="modal-header">
                        <h2 class="fw-bold">Registro de Salida</h2>
                        <div class="btn btn-icon btn-sm btn-active-icon-primary" data-bs-dismiss="modal">
                            <i class="ki-duotone ki-cross fs-1">
                                <span class="path1"></span>
                                <span class="path2"></span>
                            </i>
                        </div>
                    </div>

                    <div class="modal-body py-10 px-lg-8">
                        <div class="current" data-kt-stepper-element="content">
                        
                            <form asp-controller="RiceSacksOutput" asp-action="CreateRiceSacksOutput" method="post" class="row g-3 needs-validation" novalidate="novalidate" id="kt_riceSacksOutput_app_form">
                                <!-- Tipo de Salida -->
                                <div class="fv-row mb-7">
                                        <div class="input-group">
                                                    <div class="form-floating">
                                                        <select id="outputType" name="IdRiceSacksOutputType" class="form-select" required data-validation="required" data-dropdown-parent="#files_modal" oninput="ValidateElement($(this))">
                                                            <option value="">Seleccione un tipo de salida</option>
    @foreach (var item in Model.RiceSacksOutputTypes)
    {
                                                                        <option value="@item.IdRiceSacksOutputType">@item.name</option>
    }
                                                        </select>
                                                        <label class="form-label required">Tipo de Salida</label>
                                                    </div>
                                                </div>
                                                <div class="invalid-feedback">Este campo es obligatorio.</div>
                                </div>

                                <!-- Cliente -->
                                <div class="fv-row mb-7">
                                        <div class="input-group">
                                                    <div class="form-floating">
                                                        <input type="text" id="clientName" name="ClienteName" class="form-control" required data-validation="required" placeholder="Nombre del cliente" oninput="ValidateElement($(this))"/>
                                                        <label class="form-label required">Cliente</label>
                                                    </div>
                                                </div>
                                                <div class="invalid-feedback">Este campo es obligatorio.</div>
                                </div>

                                <!-- Observaciones -->
                                <div class="fv-row mb-7">
                                    <div class="form-floating">
                                        <textarea id="observations" name="Observations" class="form-control"
                                                  placeholder="Observaciones" data-kt-autosize="true"
                                                  style="height: 80px"></textarea>
                                        <label class="form-label">Observaciones</label>
                                    </div>
                                </div>

                                    <div class="w-100">
                        <div class="mb-8">
                            <label class="fs-6 fw-semibold mb-2">Adjunta una copia del documento de especificación técnica del arroz lotizado</label>

                            <div class="input-group row">
                                <div class="col" id="areaArrastreBankConfirmation" ondrop="handleDropBankConfirmation(event)" ondragover="handleDragOver(event)">
                                    <div id="agregarArchivoBankConfirmation" style="display: block;">
                                        <strong>Arrastra aquí</strong>
                                        <br />
                                        <strong>o</strong>
                                        <br />
                                        <label for="inputArchivoBankConfirmation" class="btn btn-sm btn-lg btn-primary">
                                            Selecciona un archivo
                                            <input type="file" name="TechnicalEspecification" required data-validation="required" id="inputArchivoBankConfirmation" style="display: none;" onchange="handleArchivoSeleccionadoBankConfirmation()" oninput="ValidateElement($(this))" />
                                        </label>
                                    </div>

                                    <div id="cardArchivoBankConfirmation">
                                        <div class="d-flex flex-stack py-4">
                                            <div class="d-flex align-items-center">
                                                <!--begin::Avatar-->
                                                <div class="symbol symbol-35px">
                                                    <img id="fileIconBankConfirmation" src="" alt="icon" />
                                                </div>
                                                <!--end::Avatar-->
                                                <!--begin::Details-->
                                                <div class="ms-6">
                                                    <p id="nombreArchivoBankConfirmation" class="fs-5 fw-bold text-gray-900 mb-2">Nombre</p>
                                                    <div id="fileSizeBankConfirmation" class="fw-semibold text-muted"></div>
                                                </div>
                                                <!--end::Details-->
                                            </div>
                                            <!--begin::Menu-->
                                            <div class="min-w-100px">
                                                <button type="button" class="close btn btn-sm btn-lg btn-primary" onclick="quitarArchivoBankConfirmation()">
                                                    <!--begin::Indicator label-->
                                                    <span class="indicator-label">Quitar</span>
                                                    <!--end::Indicator label-->
                                                </button>
                                            </div>
                                            <!--end::Menu-->
                                        </div>
                                    </div>

                                </div>
                            </div>
                            <!-- Error message -->
                            <div class="invalid-feedback">Este campo es obligatorio.</div>
                        </div>

                        <!--end::Input group-->

                            <div class="d-flex flex-stack justify-content-end gap-5">
                                                <button type="button" class="btn btn-sm btn-danger" data-bs-dismiss="modal">Cancelar</button>
                                    <button type="submit" class="btn btn-sm btn-success">
                                    <span class="indicator-label">
                                        Registrar Salida
                                    </span>
                                    <span class="indicator-progress">
                                        Por favor espere... <span class="spinner-border spinner-border-sm align-middle ms-2"></span>
                                    </span>
                                </button>
                                        </div>
                            
                    </div>
                            </form>
                        </div>
                    </div>


                </div>
            </div>
        </div>`;

        // Agregar el modal al body si no existe
        if (!document.getElementById('outputModal')) {
            document.body.insertAdjacentHTML('beforeend', modalHtml);
        }

        // Inicializar el modal
        const modal = new bootstrap.Modal(document.getElementById('outputModal'));

        // Inicializar autosize para el textarea
        autosize(document.querySelector('[data-kt-autosize="true"]'));

        $("#kt_riceSacksOutput_app_form").submit(function (e) {
            e.preventDefault();
            console.log("ESTOY EN EL BOTON SUBMIT")
            var form = $(this);
            console.log("1")
            if (validateForm(form)) {
                console.log("2")
                // Obtener los datos del DataTable
                const dataTable = $('#kt_datatable_zero_RiceSacksConsultationTable').DataTable();
                console.log("3")
                const tableData = dataTable.rows().data().toArray();
                console.log("4")

                // Crear el objeto con los datos del DataTable
                const outputData = {
                    IdRiceSacksOutputType: document.getElementById('outputType').value,
                    ClientName: document.getElementById('clientName').value,
                    Observation: document.getElementById('observations').value,
                    Consultation: JSON.stringify(tableData.map(row => ({
                        IdClassification: parseInt(row[0]), // Asumiendo que IdClassification está en la primera columna
                        QuantitySelected: parseInt(row[2])  // Asumiendo que QuantitySelected está en la tercera columna
                    })))
                };
                console.log("5")
                // Crear FormData
                const formData = new FormData();
                Object.keys(outputData).forEach(key => {
                    formData.append(key, outputData[key]);
                });
                console.log("6")
                // Agregar el archivo si existe
                const fileInput = document.getElementById('inputArchivoBankConfirmation');
                console.log("7")



                if (fileInput.files.length > 0) {
                    formData.append('Attachment', fileInput.files[0]);
                }
                console.log("8")

                // Realizar la petición AJAX
                $.ajax({
                    url: `/RiceSacksOutput/CreateRiceSacksOutput`,
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function (response) {
                        if (response === "Ok") {
                            window.location.href = `/RiceSacksOutput/Index`;
                        } else {
                            Swal.fire({
                                title: "Error",
                                text: response,
                                icon: "error",
                                buttonsStyling: false,
                                confirmButtonText: "Aceptar",
                                customClass: {
                                    confirmButton: "btn btn-danger"
                                }
                            });
                        }
                    },
                    error: function () {
                        Swal.fire({
                            title: "Error",
                            text: "Ocurrió un error en el registro. Vuelva a intentar",
                            icon: "error",
                            buttonsStyling: false,
                            confirmButtonText: "Aceptar",
                            customClass: {
                                confirmButton: "btn btn-danger"
                            }
                        });
                    }
                });
            }
        });

        // Mostrar el modal
        modal.show();
    }

</script>
<!--begin::Toolbar-->
<div id="kt_app_toolbar" class="app-toolbar py-3 py-lg-6">
    <!--begin::Toolbar container-->
    <div id="kt_app_toolbar_container" class="app-container container-xxl d-flex flex-stack">
        <!--begin::Page title-->
        <div class="page-title d-flex flex-column justify-content-center flex-wrap me-3">
            <!--begin::Title-->
            <h1 class="page-heading d-flex text-dark fw-bold fs-3 flex-column justify-content-center my-0">Consulta de sacos</h1>
            <!--end::Title-->
            <!--begin::Breadcrumb-->
            <ul class="breadcrumb breadcrumb-separatorless fw-semibold fs-7 my-0 pt-1">
                <!--begin::Item-->
                <li class="breadcrumb-item text-muted">
                    <a href="/Home/Index" class="text-muted text-hover-primary">Inicio</a>
                </li>
                <!--end::Item-->
                <!--begin::Item-->
                <li class="breadcrumb-item text-muted">
                    -
                </li>
                <!--end::Item-->
                <!--begin::Item-->
                <li class="breadcrumb-item text-muted">
                    <a onclick="Navigate('RiceSacksOutput')" class="text-muted text-hover-primary cursor-pointer">Salida de sacos</a>
                </li>
                <!--end::Item-->

            </ul>
            <!--end::Breadcrumb-->
        </div>
        <!--end::Page title-->
        <!--begin::Actions-->
        <div class="d-flex flex-stack flex-wrap gap-4">
            <!--begin::Filter menu-->
            <div class="m-0">
                <!--begin::Menu toggle-->
                <a href="#" class="btn btn-sm btn-secondary me-2 mb-2" data-kt-menu-trigger="click" data-kt-menu-placement="bottom-start" data-kt-menu-offset="0,5">
                    <i class="ki-duotone ki-plus fs-2"></i>Consulta
                </a>
                <!--end::Menu toggle-->
                <!--begin::Menu 1-->
                <div class="menu menu-sub menu-sub-dropdown w-300px w-md-350px" data-kt-menu="true" id="filter-menu">
                    <!--begin::Header-->
                    <div class="px-7 py-5 d-flex justify-content-between align-items-center">
                        <div class="fs-5 text-dark fw-bold">Consulta de sacos</div>
                    </div>
                    <!--end::Header-->
                    <!--begin::Menu separator-->
                    <div class="separator border-gray-200"></div>
                    <!--end::Menu separator-->
                    <!--begin::Form-->
                    <div class="px-7 py-5">
                        <!--begin::Status Input group-->
                        <div class="mb-5">
                            <div class="input-group">
                                <div class="form-floating">
                                    <select id="IdClassification" class="form-select" required data-validation="required" oninput="ValidateElement($(this))">
                                        <option value="">Seleccione una clasificación de arroz</option>
                                        @foreach (var item in Model.RiceClassifications)
                                        {
                                            <option value="@item.IdClassification">
                                                @item.Name
                                            </option>
                                        }
                                    </select>
                                    <label class="form-label" for="riceClass">Clasificación</label>
                                </div>
                            </div>
                            <!-- Mensaje de feedback inmediatamente después del input-group -->
                            <div class="invalid-feedback"> Este campo es obligatorio.</div>
                            <!--end::Input-->
                        </div>
                        <!--end::Input group-->
                        <!--begin::Revision Input group-->
                        <div class="mb-5">
                            <!--begin::Input-->
                            <div class="input-group">
                                <div class="form-floating">
                                    <input id="QuantitySelected" type="text" required data-validation="required,numeric" class="form-control" placeholder="Cantidad de sacos" oninput="ValidateElement($(this))" />
                                    <label class="form-label required" for="QuantitySelected">Cantidad de sacos</label>
                                </div>
                            </div>
                            <div class="invalid-feedback"> Este campo es obligatorio.</div>
                            <!--end::Input-->
                        </div>
                        <!--end::Input group-->
                        <!--begin::Actions-->
                        <div class="d-flex justify-content-end">
                            <button onclick="resetFilters()" class="btn btn-sm btn-light btn-active-light-primary me-2" data-kt-menu-dismiss="false">Reiniciar</button>
                            <button onclick="addConsultation()" class="btn btn-sm btn-primary" data-kt-menu-dismiss="false">Aplicar</button>
                        </div>
                        <!--end::Actions-->
                    </div>
                    <!--end::Form-->
                </div>
                <!--end::Menu 1-->
            </div>
            <!--end::Filter menu-->
            <a id="btnStockConsultation" onclick="StockConsultation()" class="btn btn-sm btn-success me-2 mb-2">
                <i class="ki-duotone ki-plus fs-2"></i>Procesar consulta
            </a>
            <a id="btnShowRiceSackOutputModal" class="btn btn-sm btn-primary me-2 mb-2">
                <i class="ki-duotone ki-plus fs-2"></i>Registrar salida
            </a>
        </div>
        <!--end::Actions-->
    </div>
    <!--end::Toolbar container-->
</div>
<!--end::Toolbar-->
<!--begin::Content-->
<div id="kt_app_content" class="app-content flex-column-fluid">


    <!--begin::Content container-->
    <div id="kt_app_content_container" class="app-container container-xxl" style="margin-bottom:15px;">

        <!--begin::Card-->
        <div class="card card-flush">
            <!--begin::Card body-->
            <div id="RiceSacksConsultationSection" class="card-body">
                @await Html.PartialAsync("_RiceSacksConsultationStockTablePartial")
            </div>
            <!--end::Card body-->
        </div>
        <!--end::Card-->
    </div>
    <!--end::Content container-->
</div>
<!--end::Content-->

@*<div class="app-engage " id="kt_app_engage">
    <!--begin::Files toggle-->
    <a data-bs-target="#files_modal"
       class="app-engage-btn border-hover-success hover-scale cursor-pointer"
       data-bs-toggle="modal"
       data-bs-placement="left"
       data-bs-title="Ver resumen de consulta">
        <i class="fa-solid fa-file-lines fs-2x pt-1 mb-2 text-success"></i>
    </a>
    </a>
    <!--end::Files toggle-->
    <!--begin::Files toggle-->
    <a class="app-engage-btn border-hover-primary hover-scale cursor-pointer"
       onclick=""
       data-bs-toggle="tooltip"
       data-bs-placement="left"
       data-bs-title="Ver resumen desde móvil">
        <i class="fa-solid fa-mobile-screen fs-2x pt-1 mb-2 text-primary" ></i>
    </a>
    <!--end::Files toggle-->
</div>*@


<!-- Modal -->
<div class="modal right fade" id="files_modal" tabindex="-1" aria-labelledby="files_modalLabel" aria-hidden="true">
    <div class="modal-dialog modal-fullscreen modal-dialog-scrollable">
        <div class="modal-content">
            <div id="modalHeader"></div>
            <div class="modal-body px-10">
                <!-- Cards Container -->
                <div id="consultationCards" class="d-flex flex-column gap-4">
                    <!-- Las cards se generarán aquí dinámicamente -->
                </div>
            </div>
            <div id="modalFooter">
                <!-- El footer se generará dinámicamente -->
            </div>
        </div>
    </div>
</div>